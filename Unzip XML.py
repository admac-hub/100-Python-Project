from asyncore import read
from cgitb import reset
from io import StringIO
import base64
import zlib

DEST_FILE_NAME = "result.xml"
GZIPPEDBASE64 = "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"


def translate_to_file():
    result = zlib.decompress(base64.b64decode(GZIPPEDBASE64), 16 + zlib.MAX_WBITS).decode('utf-8') 
    with open(DEST_FILE_NAME, "w") as file:
        file.write(result)

def read_file():
    with open(DEST_FILE_NAME) as file:
        return file.readlines()

def clean_file(lines):
    with open(DEST_FILE_NAME, 'w') as file:
        lines = filter(lambda x: x.strip(), lines)
        file.writelines(lines)

def main():
    translate_to_file()

    lines = read_file()
    clean_file(lines)

if __name__ == "__main__":
    main()